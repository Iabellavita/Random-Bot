from aiogram import types
from aiogram.dispatcher.storage import FSMContext
from aiogram.types import CallbackQuery
from app import dp
from keyboards.inline_button import choose, cancel
from states import Words
from states import Digits
import random


def random_choice(data: str):
    if ';' in data:
        choices = data.split(';')
        choice = random.choice(choices)
    elif '-' in data:
        choices = data.split('-')
        choice = random.randint(int(choices[0]), int(choices[1]))
    return choice


@dp.callback_query_handler(text="words")
async def cancel_button(call: CallbackQuery):
    await call.answer()
    await call.message.answer(
        "‚òùÔ∏è –í—ñ–¥–ø—Ä–∞–≤ –≤–∏–±–æ—Ä–∫—É —Å–ª—ñ–≤ –∞–±–æ —Å–ª–æ–≤–æ—Å–ø–æ–ª—É—á–µ–Ω—å —á–µ—Ä–µ–∑ –∫—Ä–∞–ø–∫—É –∑ –∫–æ–º–æ—é, —è–∫ –Ω–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ –Ω–∏–∂—á–µ\n\n"
        "<code>–°–ª–æ–≤–æ—Å–ø–æ–ª—É—á–µ–Ω–Ω—è 1;–°–ª–æ–≤–æ—Å–ø–æ–ª—É—á–µ–Ω–Ω—è 2;–°–ª–æ–≤–æ—Å–ø–æ–ª—É—á–µ–Ω–Ω—è 3</code>",
        parse_mode=types.ParseMode.HTML, reply_markup=cancel)
    await Words.Q1.set()


@dp.callback_query_handler(text="digits")
async def cancel_button(call: CallbackQuery):
    await call.answer()
    await call.message.answer(
        "‚òùÔ∏è –í—ñ–¥–ø—Ä–∞–≤ —Å–≤—ñ–π —á–∏—Å–µ–ª—å–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω, —è–∫ –Ω–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ –Ω–∏–∂—á–µ\n\n"
        "<code>6543-99999</code>",
        parse_mode=types.ParseMode.HTML, reply_markup=cancel)
    await Digits.Q1.set()


@dp.callback_query_handler(text="cancel", state='*')
async def cancel_button(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer("–û–±–µ—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É —Ç–æ–±—ñ —Ñ—É–Ω–∫—Ü—ñ—é üëá", reply_markup=choose,
                              parse_mode=types.ParseMode.HTML)


@dp.message_handler(state=Words.Q1)
async def check_title(message: types.Message, state: FSMContext):
    try:
        choice = random_choice(message.text)
        await message.answer("üé£ –ú—ñ–π –≤–∏–±—ñ—Ä:\n\n"
                             f"{choice}", parse_mode=types.ParseMode.HTML)
    except:
        await message.answer("üå∂ –î–æ—Ç—Ä–∏–º—É–π—Å—è –ø—Ä–∞–≤–∏–ª –≤–≤–æ–¥—É. –ü–µ—Ä–µ–≤—ñ—Ä –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ.", parse_mode=types.ParseMode.HTML)

    await state.finish()
    await message.answer("–û–±–µ—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É —Ç–æ–±—ñ —Ñ—É–Ω–∫—Ü—ñ—é üëá", reply_markup=choose,
                         parse_mode=types.ParseMode.HTML)


@dp.message_handler(state=Digits.Q1)
async def cancel_button(message: types.Message, state: FSMContext):
    try:
        choice = random_choice(message.text)
        await message.answer("üß© –ú—ñ–π –≤–∏–±—ñ—Ä:\n\n"
                             f"{choice}", parse_mode=types.ParseMode.HTML)
    except:
        await message.answer("üå∂ –î–æ—Ç—Ä–∏–º—É–π—Å—è –ø—Ä–∞–≤–∏–ª –≤–≤–æ–¥—É. –ü–µ—Ä–µ–≤—ñ—Ä –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ.", parse_mode=types.ParseMode.HTML)

    await state.finish()
    await message.answer("–û–±–µ—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É —Ç–æ–±—ñ —Ñ—É–Ω–∫—Ü—ñ—é üëá", reply_markup=choose,
                         parse_mode=types.ParseMode.HTML)
